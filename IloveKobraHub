local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
        local Window = OrionLib:MakeWindow({Name = "Anir Hub", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})

        local Tab = Window:MakeTab({
            Name = "Main",
            Icon = "rbxassetid://4483345998",
            PremiumOnly = false
        })

        local Section = Tab:AddSection({
            Name = "Chat Log's"
        })

        --[[
        Name =  - The name of the section.
        ]]
        OrionLib:MakeNotification({
            Name = "From sytcal on discord",
            Content = "sup nigger",
            Image = "rbxassetid://4483345998",
            Time = 5
        })

        --[[
        Title =  - The title of the notification.
        Content =  - The content of the notification.
        Image =  - The icon of the notification.
        Time =  - The duration of the notfication.
        ]]
        --This script reveals ALL hidden messages in the default chat
        --chat "/spy" to toggle!
        enabled = true
        --if true will check your messages too
        spyOnMyself = true
        --if true will chat the logs publicly (fun, risky)
        public = false
        --if true will use /me to stand out
        publicItalics = true
        --customize private logs
        privateProperties = {
            Color = Color3.fromRGB(0,255,255); 
            Font = Enum.Font.SourceSansBold;
            TextSize = 18;
        }
        local StarterGui = game:GetService("StarterGui")
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local saymsg = game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("SayMessageRequest")
        local getmsg = game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("OnMessageDoneFiltering")
        local instance = (_G.chatSpyInstance or 0) + 1
        _G.chatSpyInstance = instance
        
        local function onChatted(p,msg)
            if _G.chatSpyInstance == instance then
                if p==player and msg:lower():sub(1,4)=="/spy" then
                    enabled = not enabled
                    wait(0.3)
                    privateProperties.Text = "{SPY "..(enabled and "EN" or "DIS").."ABLED}"
                    StarterGui:SetCore("ChatMakeSystemMessage",privateProperties)
                elseif enabled and (spyOnMyself==true or p~=player) then
                    msg = msg:gsub("[\n\r]",''):gsub("\t",' '):gsub("[ ]+",' ')
                    local hidden = true
                    local conn = getmsg.OnClientEvent:Connect(function(packet,channel)
                        if packet.SpeakerUserId==p.UserId and packet.Message==msg:sub(#msg-#packet.Message+1) and (channel=="All" or (channel=="Team" and public==false and Players[packet.FromSpeaker].Team==player.Team)) then
                            hidden = false
                        end
                    end)
                    wait(1)
                    conn:Disconnect()
                    if hidden and enabled then
                        if public then
                            saymsg:FireServer((publicItalics and "/me " or '').."{SPY} [".. p.Name .."]: "..msg,"All")
                        else
                            privateProperties.Text = "{SPY} [".. p.Name .."]: "..msg
                            StarterGui:SetCore("ChatMakeSystemMessage",privateProperties)
                        end
                    end
                end
            end
        end
        
        for _,p in ipairs(Players:GetPlayers()) do
            p.Chatted:Connect(function(msg) onChatted(p,msg) end)
        end
        Players.PlayerAdded:Connect(function(p)
            p.Chatted:Connect(function(msg) onChatted(p,msg) end)
        end)
        privateProperties.Text = "{SPY "..(enabled and "EN" or "DIS").."ABLED}"
        StarterGui:SetCore("ChatMakeSystemMessage",privateProperties)
        local chatFrame = player.PlayerGui.Chat.Frame
        chatFrame.ChatChannelParentFrame.Visible = true
        chatFrame.ChatBarParentFrame.Position = chatFrame.ChatChannelParentFrame.Position+UDim2.new(UDim.new(),chatFrame.ChatChannelParentFrame.Size.Y)
	end
})
GUIS:AddButton({
	Title = "Chat Logs",
	Description = "only works in some games? see private messages if this doesnt work try IY chatlogs",
	Callback = function()
		if game:service('RunService'):IsStudio() then print('!STUDIO!') else
            if game:service('CoreGui'):findFirstChild('LogHolder') then return nil
            end
        end
        
        local LogHolder = Instance.new("ScreenGui")
        local Logs = Instance.new("Frame")
        local Scroll = Instance.new("ScrollingFrame")
        local Template = Instance.new("TextLabel")
        
        LogHolder.Name = "LogHolder"
        if game:service('RunService'):IsStudio() then LogHolder.Parent = game:GetService("Players").LocalPlayer.PlayerGui else
            LogHolder.Parent = game:GetService("CoreGui")
        end
        
        Logs.Name = "Logs"
        Logs.Parent = LogHolder
        Logs.AnchorPoint = Vector2.new(0.5, 0.5)
        Logs.BackgroundColor3 = Color3.new(1, 1, 1)
        Logs.Position = UDim2.new(0.200000003, 0, 0.200000003, 0)
        Logs.Size = UDim2.new(0, 400, 0, 250)
        Logs.Style = Enum.FrameStyle.DropShadow
        
        Scroll.Name = "Scroll"
        Scroll.Parent = Logs
        Scroll.BackgroundColor3 = Color3.new(1, 1, 1)
        Scroll.BackgroundTransparency = 1
        Scroll.BorderSizePixel = 0
        Scroll.Size = UDim2.new(1, 0, 1, 0)
        Scroll.CanvasSize = UDim2.new(0, 0, 0, 0)
        Scroll.ScrollBarThickness = 6
        
        Template.Name = "Template"
        Template.Parent = Logs
        Template.BackgroundColor3 = Color3.new(1, 1, 1)
        Template.BackgroundTransparency = 1
        Template.Position = UDim2.new(0, 0, 0, -25)
        Template.Size = UDim2.new(1, 0, 0, 20)
        Template.Font = Enum.Font.ArialBold
        Template.Text = ""
        Template.TextColor3 = Color3.new(1, 1, 1)
        Template.TextSize = 15
        Template.TextXAlignment = Enum.TextXAlignment.Left
        Template.TextWrap = true
        
        Logs.Active = true
        Logs.Draggable = true
        
        local loggedTable = {}
        
        local getTotalSize = function()
        local totalSize = UDim2.new(0, 0, 0, 0)
            
            for i, v in next, loggedTable do
                totalSize = totalSize + UDim2.new(0, 0, 0, v.Size.Y.Offset)
            end
            
            return totalSize
        end
        
        local BUD = UDim2.new(0, 0, 0, 0)
        local TotalNum = 0
        
        local function GenLog(txt, colo, time)
            local oldColo = Color3.fromRGB(0, 0, 0)	
            
            local Temp = Template:Clone()
            Temp.Parent = Scroll
            Temp.Name = txt..'Logged'
            Temp.Text = tostring(txt)
            Temp.Visible = true
            Temp.Position = BUD + UDim2.new(0, 0, 0, 0)
            if colo then oldColo = colo Temp.TextColor3 = colo elseif not colo then Temp.TextColor3 = Color3.fromRGB(200, 200, 200) end
        
            local timeVal = Instance.new('StringValue', Temp)
            timeVal.Name = 'TimeVal'
            timeVal.Value = time
        
            TotalNum = TotalNum + 1
            
            if not Temp.TextFits then repeat Temp.Size = UDim2.new(Temp.Size.X.Scale, Temp.Size.X.Offset, Temp.Size.Y.Scale, Temp.Size.Y.Offset + 10)
                Temp.Text = txt
            until Temp.TextFits 
        end
        
            BUD = BUD + UDim2.new(0, 0, 0, Temp.Size.Y.Offset)
            
            table.insert(loggedTable, Temp)
            
            local totSize = getTotalSize()
            
            if totSize.Y.Offset >= Scroll.CanvasSize.Y.Offset then Scroll.CanvasSize = UDim2.new(totSize.X.Scale, totSize.X.Offset, totSize.Y.Scale, totSize.Y.Offset + 100)
            Scroll.CanvasPosition = Scroll.CanvasPosition + Vector2.new(0, totSize.Y.Offset) 
            end
            
            return Temp
        end
        
        local ChatData = ""
        
        local function SaveToFile()
            local t = os.date("*t")
            local dateDat = t['hour']..' '..t['min']..' '..t['sec']..' '..t['day']..'.'..t['month']..'.'..t['year']
            
            ChatData = ""
            
            for i, v in pairs(Scroll:GetChildren()) do
                ChatData = ChatData..v.TimeVal.Value..' '..v.Text..'\n'
            end
            
            writefile('ChatLogs '..dateDat..'.txt', ChatData)
        end
        
        
        local function Clear()
            loggedTable = {}
            ChatData = ""
            Scroll.CanvasPosition = Vector2.new(0, 0)
            for i, v in pairs(Scroll:GetChildren()) do
                v:Destroy()
            end
            Scroll.CanvasSize = UDim2.new(0, 0, 0, 0)
            BUD = UDim2.new(0, 0, 0, 0)
        end
        
        local LogPlr = function(plr)
                    plr.Chatted:connect(function(msg)
                        
                    local t = os.date("*t")
                    local dateDat = t['hour']..':'..t['min']..':'..t['sec']
            
                    if string.len(msg) >= 1000 then return nil end
                    if string.lower(msg) == 'clear' and plr == game:service('Players').LocalPlayer then Clear() return nil end
                    if string.lower(msg) == 'savetofile' and plr == game:service('Players').LocalPlayer then SaveToFile() return nil end
                    if string.sub(msg, 1, 1):match('%p') and string.sub(msg, 2, 2):match('%a') and string.len(msg) >= 5 then GenLog(plr.Name..': '..msg, Color3.new(255, 0, 0), dateDat) else
                    GenLog(plr.Name..': '..msg, Color3.new(255, 255, 255), dateDat)
                    end
            end)
        end
        
        for i, v in pairs(game:GetService("Players"):GetChildren()) do
            LogPlr(v)
        end
        
        game:GetService("Players").PlayerAdded:connect(function(plr)
            LogPlr(plr)
        end)
        
	end
})
